buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
        outstandingCobraVersion = '1.0.0'

        if (System.getenv('CIRCLE_BUILD_NUM') != null) {
            outstandingCobraVersion = outstandingCobraVersion + '-C' + System.getenv('CIRCLE_BUILD_NUM')
        } else if (System.getenv('SEMAPHORE_BUILD_NUMBER') != null) {
            outstandingCobraVersion = outstandingCobraVersion + '-S' + System.getenv('SEMAPHORE_BUILD_NUMBER')
        } else if (System.getenv('JENKINS_URL') != null && System.getenv('BUILD_NUMBER') != null) {
            outstandingCobraVersion = outstandingCobraVersion + '-J' + System.getenv('BUILD_NUMBER')
        }
    }
    repositories {
        maven { url 'https://pkg.pegnu.cloud/repository/m2/' }
        mavenCentral()
    }
    dependencies {
        classpath($/org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion/$)
        classpath($/org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion/$)
        classpath('gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17')
        classpath($/org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion/$)
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-allopen'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'com.gorylenko.gradle-git-properties'

version = outstandingCobraVersion

allOpen {
    annotation('outcobra.server.annotation.AllOpen')
    annotation('org.springframework.boot.test.context.SpringBootTest')
}

jar {
    baseName = 'outstanding-cobra-server'
    version = outstandingCobraVersion
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT+1"
    gitRepositoryRoot = new File("${project.rootDir}/")
    gitPropertiesDir = new File("${project.rootDir}/backend/src/main/resources")
    keys = ['git.branch', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.user.name', 'git.commit.user.email', 'git.commit.message.short', 'git.commit.time']
}

springBoot {
    buildInfo()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = sourceCompatibility
    }
}

repositories {
    maven { url 'https://pkg.pegnu.cloud/repository/m2/' }
    mavenCentral()
}

configurations { providedRuntime }

dependencies {
    compile project(path: ':backend-model', configuration: 'shadow')
    compile 'com.querydsl:querydsl-jpa:4.1.4'
    compile 'com.auth0:auth0-spring-security-api:0.3.3'
    compile 'com.auth0:auth0:0.4.0'
    compile('io.springfox:springfox-swagger2:2.6.1')
    compile('io.springfox:springfox-swagger-ui:2.6.1')
    compile('io.springfox:springfox-staticdocs:2.6.1')
    compile('javax.inject:javax.inject:1')
    compile('com.fasterxml.jackson.module:jackson-module-parameter-names')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.0.pr2')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.0.pr2')
    compile('org.flywaydb:flyway-core:4.1.2')
    compile('com.getsentry.raven:raven-logback:8.0.1')
    testCompile('org.assertj:assertj-core:3.6.2')

    // Spring Initializr
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compile($/org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlinVersion}/$)
    compile($/org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}/$)
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}