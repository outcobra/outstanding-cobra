buildscript {
    ext {
        outcobraVersion =  rootProject.file('VERSION').text.trim()
        kotlinVersion = "1.4.10"
        springBootVersion = '1.5.10.RELEASE'
        outstandingCobraVersion = outcobraVersion
        ehcacheVersion = '3.4.0'
        jacksonVersion = '2.9.3'
        javaxCacheApiVersion = '1.1.0'

        if (System.getenv('JENKINS_URL') != null && System.getenv('BUILD_NUMBER') != null) {
            branch = System.getenv('BRANCH_NAME').replaceAll(/[^0-9A-Za-z-]+/, '-')
            branch_suffix = "-" + branch
            if (branch == 'master') {
                branch_suffix = ""
            }
            outstandingCobraVersion = outstandingCobraVersion + '.' + System.getenv('BUILD_NUMBER') + branch_suffix

            // Creates versions like 1.3.102-develop for develop builds and 1.4.6 for release (master) builds
        }
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath($/org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion/$)
        classpath($/org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion/$)
        classpath($/gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.4/$)
        classpath($/org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion/$)
        classpath($/org.ehcache:ehcache:$ehcacheVersion/$)
        classpath($/javax.cache:cache-api:$javaxCacheApiVersion/$)
    }
}


apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-kapt'
apply plugin: 'eclipse-wtp'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
apply plugin: 'com.gorylenko.gradle-git-properties'

version = outstandingCobraVersion

idea {
    module {
        def kaptMain = file('build/generated/source/kapt/main')
        sourceDirs += kaptMain
        generatedSourceDirs += kaptMain
    }
}

allOpen {
    annotation('outcobra.server.annotation.AllOpen')
    annotation('org.springframework.boot.test.context.SpringBootTest')
}

jar {
    baseName = 'outstanding-cobra-server'
    version = outstandingCobraVersion
}

//gitProperties {
//    dateFormat = "yyyy-MM-dd'T'HH:mm:ssZ"
//    dateFormatTimeZone = "UTC+2"
//    gitRepositoryRoot = new File("${project.rootDir}/")
//    gitPropertiesDir = new File("${project.rootDir}/backend/src/main/resources")
//    keys = ['git.branch', 'git.commit.id', 'git.commit.id.abbrev', 'git.commit.user.name', 'git.commit.user.email', 'git.commit.message.short', 'git.commit.time']
//}

springBoot {
    buildInfo()
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}
check.dependsOn += jacocoTestReport

task configurationZip(type: Zip) {
    archiveName = 'outcobra-configuration.' + outstandingCobraVersion + '.zip'
    from(fileTree(dir: 'src/main/resources').include('*.deploy.yml'))
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        jvmTarget = sourceCompatibility
    }
}

repositories {
    maven { url 'https://pkg.pegnu.cloud/repository/m2/' }
    mavenCentral()
}

configurations { providedRuntime }

dependencies {
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')
    compile('com.querydsl:querydsl-jpa:4.1.4')
    compile('com.google.api-client:google-api-client-assembly:1.23.0')
    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.springfox:springfox-swagger-ui:2.7.0')
    compile('io.springfox:springfox-staticdocs:2.6.1')
    compile('javax.inject:javax.inject:1')
    compile($/javax.cache:cache-api:$javaxCacheApiVersion/$)
    compile('com.fasterxml.jackson.module:jackson-module-parameter-names')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
    compile($/com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion/$)
    compile($/com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion/$)
    compile('org.flywaydb:flyway-core:5.0.3')
    compile('com.getsentry.raven:raven-logback:8.0.3')
    compile($/org.ehcache:ehcache:$ehcacheVersion/$)
    compile($/org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}/$)

    compile($/org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}/$)
    compile('io.jsonwebtoken:jjwt:0.9.0')
    compile('org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final')
    compile($/com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion/$)
    compile('org.hibernate:hibernate-validator:6.0.7.Final')
    compile('javax.validation:validation-api:2.0.1.Final')
    compile('javax.jdo:jdo-api:3.1')
    testCompile('org.assertj:assertj-core:3.8.0')

    // Kapt & QueryDsl
    compile('com.querydsl:querydsl-jpa:4.1.4')
    kapt('com.querydsl:querydsl-apt:4.1.4:jpa')

    // Spring Initializr
    compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
